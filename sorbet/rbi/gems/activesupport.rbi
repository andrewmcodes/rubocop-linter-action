# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activesupport/all/activesupport.rbi
#
# activesupport-6.0.2.1
class Hash
  def blank?; end
  def deep_merge!(other_hash, &block); end
  def deep_merge(other_hash, &block); end
  def except!(*keys); end
  def except(*keys); end
  def extract!(*keys); end
  def extractable_options?; end
  def slice!(*keys); end
end
module ActiveSupport
  def self.eager_load!; end
  def self.gem_version; end
  def self.test_order; end
  def self.test_order=(obj); end
  def self.to_time_preserves_timezone; end
  def self.to_time_preserves_timezone=(value); end
  def self.version; end
  def test_order; end
  def test_order=(obj); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::LazyLoadHooks
end
module ActiveSupport::LazyLoadHooks
  def execute_hook(name, base, options, block); end
  def on_load(name, options = nil, &block); end
  def run_load_hooks(name, base = nil); end
  def self.extended(base); end
  def with_execution_control(name, block, once); end
end
module Kernel
  def class_eval(*args, &block); end
end
class Module
  def cattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def cattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil); end
  def cattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil); end
  def delegate(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil); end
  def delegate_missing_to(target); end
  def deprecate(*method_names); end
  def mattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def mattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil); end
  def mattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil); end
  def method_visibility(method); end
  def redefine_method(method, &block); end
  def redefine_singleton_method(method, &block); end
  def silence_redefinition_of_method(method); end
end
class Module::DelegationError < NoMethodError
end
class ActiveSupport::Deprecation
  def self.behavior(*args, &block); end
  def self.behavior=(arg); end
  def self.debug(*args, &block); end
  def self.debug=(arg); end
  def self.deprecate_methods(*args, &block); end
  def self.deprecation_horizon(*args, &block); end
  def self.deprecation_horizon=(arg); end
  def self.deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def self.gem_name(*args, &block); end
  def self.gem_name=(arg); end
  def self.initialize(*args, &block); end
  def self.silence(*args, &block); end
  def self.silenced(*args, &block); end
  def self.silenced=(arg); end
  def self.warn(message = nil, callstack = nil); end
  extend ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend Singleton::SingletonClassMethods
  include ActiveSupport::Deprecation::Behavior
  include ActiveSupport::Deprecation::InstanceDelegator
  include ActiveSupport::Deprecation::MethodWrapper
  include ActiveSupport::Deprecation::Reporting
  include Singleton
end
module ActiveSupport::Deprecation::InstanceDelegator
  def self.included(base); end
end
module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  def include(included_module); end
  def method_added(method_name); end
end
module ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Notifications
  def self.instrument(name, payload = nil); end
  def self.instrumenter; end
  def self.notifier; end
  def self.notifier=(arg0); end
  def self.publish(name, *args); end
  def self.subscribe(*args, &block); end
  def self.subscribed(callback, *args, &block); end
  def self.unsubscribe(subscriber_or_name); end
end
class ActiveSupport::Notifications::Instrumenter
  def finish(name, payload); end
  def finish_with_state(listeners_state, name, payload); end
  def id; end
  def initialize(notifier); end
  def instrument(name, payload = nil); end
  def start(name, payload); end
  def unique_id; end
end
class ActiveSupport::Notifications::Event
  def <<(event); end
  def allocations; end
  def children; end
  def cpu_time; end
  def duration; end
  def end; end
  def end=(ending); end
  def finish!; end
  def idle_time; end
  def initialize(name, start, ending, transaction_id, payload); end
  def name; end
  def now; end
  def now_allocations; end
  def now_cpu; end
  def parent_of?(event); end
  def payload; end
  def self.clock_gettime_supported?; end
  def start!; end
  def time; end
  def transaction_id; end
end
class ActiveSupport::Notifications::Fanout
  def finish(name, id, payload, listeners = nil); end
  def initialize; end
  def listeners_for(name); end
  def listening?(name); end
  def lock; end
  def locked?; end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribe(pattern = nil, callable = nil, &block); end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  def unsubscribe(subscriber_or_name); end
  def wait; end
  include Mutex_m
end
module ActiveSupport::Notifications::Fanout::Subscribers
  def self.event_object_subscriber(pattern, block); end
  def self.new(pattern, listener); end
  def self.wrap_all(pattern, subscriber); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Matcher
  def ===(name); end
  def exclusions; end
  def initialize(pattern); end
  def pattern; end
  def self.wrap(pattern); end
  def unsubscribe!(name); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def initialize(pattern, delegate); end
  def matches?(name); end
  def pattern; end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
  def unsubscribe!(name); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Timed < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def publish(name, *args); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::EventObject < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def build_event(name, id, payload); end
  def finish(name, id, payload); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::AllMessages
  def finish(name, id, payload); end
  def initialize(delegate); end
  def matches?(arg0); end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
  def unsubscribe!(*arg0); end
end
module ActiveSupport::PerThreadRegistry
  def instance; end
  def method_missing(name, *args, &block); end
  def self.extended(object); end
end
class ActiveSupport::Notifications::InstrumentationRegistry
  def initialize; end
  def instrumenter_for(notifier); end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::DeprecationException < StandardError
end
module ActiveSupport::Deprecation::Behavior
  def arity_coerce(behavior); end
  def behavior; end
  def behavior=(behavior); end
  def debug; end
  def debug=(arg0); end
end
module ActiveSupport::Deprecation::Reporting
  def _extract_callstack(callstack); end
  def deprecated_method_warning(method_name, message = nil); end
  def deprecation_caller_message(callstack); end
  def deprecation_message(callstack, message = nil); end
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def extract_callstack(callstack); end
  def gem_name; end
  def gem_name=(arg0); end
  def ignored_callstack(path); end
  def silence; end
  def silenced; end
  def silenced=(arg0); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  def self.included(base); end
end
class Array
  def blank?; end
  def extract_options!; end
end
module ActiveSupport::Deprecation::MethodWrapper
  def deprecate_methods(target_module, *method_names); end
end
class ActiveSupport::Deprecation::DeprecationProxy
  def inspect; end
  def method_missing(called, *args, &block); end
  def self.new(*args, &block); end
end
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(object, message, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(instance, method, var = nil, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedConstantProxy < Module
  def class; end
  def const_missing(name); end
  def initialize(old_const, new_const, deprecator = nil, message: nil); end
  def inspect; end
  def method_missing(called, *args, &block); end
  def self.new(*args, &block); end
  def target; end
end
module ActiveSupport::Inflector
  def apply_inflections(word, rules, locale = nil); end
  def camelize(term, uppercase_first_letter = nil); end
  def classify(table_name); end
  def const_regexp(camel_cased_word); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def deconstantize(path); end
  def demodulize(path); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word, capitalize: nil, keep_id_suffix: nil); end
  def inflections(locale = nil); end
  def ordinal(number); end
  def ordinalize(number); end
  def pluralize(word, locale = nil); end
  def safe_constantize(camel_cased_word); end
  def singularize(word, locale = nil); end
  def tableize(class_name); end
  def titleize(word, keep_id_suffix: nil); end
  def underscore(camel_cased_word); end
  def upcase_first(string); end
  extend ActiveSupport::Inflector
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def acronym(word); end
  def acronyms; end
  def acronyms_camelize_regex; end
  def acronyms_underscore_regex; end
  def clear(scope = nil); end
  def define_acronym_regex_patterns; end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def initialize_dup(orig); end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.instance(locale = nil); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
class ActiveSupport::Inflector::Inflections::Uncountables < Array
  def <<(*word); end
  def add(words); end
  def delete(entry); end
  def initialize; end
  def to_regex(string); end
  def uncountable?(str); end
end
module ActiveSupport::Autoload
  def autoload(const_name, path = nil); end
  def autoload_at(path); end
  def autoload_under(path); end
  def autoloads; end
  def eager_autoload; end
  def eager_load!; end
  def self.extended(base); end
end
module ActiveSupport::VERSION
end
module ActiveSupport::Concern
  def append_features(base); end
  def class_methods(&class_methods_module_definition); end
  def included(base = nil, &block); end
  def self.extended(base); end
end
class ActiveSupport::Concern::MultipleIncludedBlocks < StandardError
  def initialize; end
end
module ActiveSupport::LoggerThreadSafeLevel
  def add(severity, message = nil, progname = nil, &block); end
  def after_initialize; end
  def debug?; end
  def error?; end
  def fatal?; end
  def info?; end
  def level; end
  def local_level; end
  def local_level=(level); end
  def local_log_id; end
  def unknown?; end
  def warn?; end
  extend ActiveSupport::Concern
end
module LoggerSilence
  extend ActiveSupport::Concern
end
module ActiveSupport::LoggerSilence
  def silence(temporary_level = nil); end
  extend ActiveSupport::Concern
end
class ActiveSupport::Logger < Logger
  def initialize(*args); end
  def self.broadcast(logger); end
  def self.local_levels; end
  def self.local_levels=(obj); end
  def self.logger_outputs_to?(logger, *sources); end
  def self.silencer; end
  def self.silencer=(obj); end
  def silencer; end
  def silencer=(obj); end
  include ActiveSupport::LoggerSilence
  include ActiveSupport::LoggerThreadSafeLevel
end
class ActiveSupport::Logger::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
module DateAndTime
end
module DateAndTime::Compatibility
  def preserve_timezone; end
  def self.preserve_timezone; end
  def self.preserve_timezone=(obj); end
end
class Object < BasicObject
  def blank?; end
  def presence; end
  def present?; end
end
class NilClass
  def blank?; end
end
class FalseClass
  def blank?; end
end
class TrueClass
  def blank?; end
end
class String
  def blank?; end
end
class Numeric
  def blank?; end
end
class Time
  def blank?; end
end
